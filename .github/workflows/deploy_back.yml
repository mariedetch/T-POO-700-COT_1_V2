name: Deploy the backend (Time Manager Backend)

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Installer le CLI Heroku
    - name: Install Heroku CLI
      run: curl https://cli-assets.heroku.com/install.sh | sh

    # Authentification à Heroku CLI
    - name: Log in to Heroku CLI
      env:
        HEROKU_API_KEY: "HRKU-a40e9aa6-e9e1-44f5-8f26-aa1395ee1f33"
        HEROKU_EMAIL: "mariella.detchenou@epitech.eu"
      run: |
        echo "machine api.heroku.com" > ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        heroku auth:token

    # Authentification Docker pour Heroku
    - name: Log in to Heroku Docker Registry
      env:
        HEROKU_API_KEY: "HRKU-a40e9aa6-e9e1-44f5-8f26-aa1395ee1f33"
      run: |
        echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

    # Construction de l'image Docker
    - name: Build Docker image for Backend
      working-directory: ./time-manager-backend
      run: docker build --file Dockerfile --tag registry.heroku.com/time-manager-api/web .

    # Pousser l'image vers le registre de conteneurs Heroku
    - name: Push Docker image to Heroku Container Registry
      working-directory: ./time-manager-backend
      run: docker push registry.heroku.com/time-manager-api/web

    # Lancer le déploiement de l'application
    - name: Release the Backend Application on Heroku
      run: |
        heroku container:release web --app time-manager-api

    # Exécuter les migrations de la base de données
    - name: Run database migrations
      run: |
        heroku run mix ecto.migrate --app time-manager-api
